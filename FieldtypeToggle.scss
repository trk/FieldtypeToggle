@mixin inputfield-toggle($toggleWidth, $toggleHeight, $handleMargin, $roundness, $on-color, $off-color, $label) {
  $handleColor: #FFF;
  $handleHeight: $toggleHeight - ($handleMargin * 2);
  $handleWidth: $handleHeight;
  $handleRadius: $handleHeight * $roundness;
  $toggleRadius: ($toggleHeight / 2) * $roundness;
  position: relative; // display: block;
  -webkit-appearance: none;
  /* -moz-appearance: none; */
  appearance: none;
  top: 0;
  left: 0;
  width: $toggleWidth;
  height: $toggleHeight;
  margin: 5px;
  border-radius: $toggleRadius;
  background: $off-color;
  box-sizing: border-box;
  box-shadow: inset 0px 1px 0px rgba(0, 0, 0, 0.2); // text-indent: -9999px;
  overflow: hidden;
  cursor: pointer; //toggle when checked
  &:checked {
    background: $on-color; //border-color: $on-color;
  }
  @if($label) {
    &:before {
      display: block;
      content: "";
      font-size: $handleHeight*0.4;
      line-height: $toggleHeight;
      padding-right: .5em;
      padding-left: 1em;
      color: white;
      animation: slide-left 0.3s cubic-bezier(0.88, 0.04, 0.33, 1.05) forwards;
      animation-delay: 0s;
      opacity: 0;
    }
    &:checked:before {
      /* content: "ON"; */
      /* text-align:left; */
      animation: slide-right .3s cubic-bezier(0.88, 0.04, 0.33, 1.05) forwards;
      animation-delay: 0s;
    }
  } //handle
  &:after {
    position: absolute;
    @if $roundness < 0.5 {
      content: '|||';
    }
    @else {
      content: '';
    }
    font-size: $handleHeight*0.5;
    line-height: $handleHeight;
    text-align: center;
    color: rgba(0, 0, 0, 0.2);
    top: $handleMargin;
    left: $handleMargin;
    width: $handleWidth;
    height: $handleHeight;
    border-radius: ($handleRadius / 2);
    transition: .3s cubic-bezier(0.88, 0.04, 0.33, 1.05);
    background: $handleColor;
    box-shadow: 0px 1px 0px 1px rgba(0, 0, 0, 0.25);
  } //handle when checked
  &:checked:after {
    transform: translateX($toggleWidth - $handleWidth - ($handleMargin * 2));
  } //handdle when pressed down
  &:active {
    $multiplier: 1.5;
    &:after {
      width: $handleWidth * $multiplier;
    }
    &:checked:after {
      margin-left: $handleWidth * (1 - $multiplier);
      /* transform: translateX($toggleWidth - ($handleWidth * $multiplier) - ($handleMargin * 2)); */
    }
  }
  &:focus,
  &:hover {
    &:after {
      content: "●";
    }
  }
  &:disabled {
    cursor: not-allowed;
    opacity: .5;
    &:after {
      opacity: 1;
      content: '•';
      color: rgba(0, 0, 0, 0.2);
    }
  }
}

@keyframes slide-left {
  0% {
    transform: translateX(0%);
    content: "ON";
    opacity: .7;
    text-align: left;
  }
  49% {
    transform: translateX(-10%);
    content: "ON";
    opacity: 0;
    text-align: left;
  }
  50% {
    transform: translateX(10%);
    content: "OFF";
    opacity: 0;
    text-align: right;
  }
  100% {
    transform: translateX(0%);
    content: "OFF";
    opacity: .7;
    text-align: right;
  }
}

@keyframes slide-right {
  0% {
    transform: translateX(0%);
    content: "OFF";
    opacity: .7;
    text-align: right;
  }
  49% {
    transform: translateX(10%);
    content: "OFF";
    opacity: 0;
    text-align: right;
  }
  50% {
    transform: translateX(-10%);
    opacity: 0;
    content: "ON";
    text-align: left;
  }
  100% {
    transform: translateX(0%);
    opacity: .7;
    content: "ON";
    text-align: left;
  }
}

/* Default classes */

$defaultColor: #3778ff;
input.inputfield-toggle {
  @include inputfield-toggle(44px, 22px, 1px, 1, $defaultColor, gray, false);
}

input[type="checkbox"].inputfield-toggle.xs {
  @include inputfield-toggle(18px, 12px, 1px, 1, $defaultColor, gray, false);
}

input[type="checkbox"].inputfield-toggle.sm {
  @include inputfield-toggle(32px, 16px, 1px, 1, $defaultColor, gray, false);
}

input[type="checkbox"].inputfield-toggle.lg {
  @include inputfield-toggle(64px, 32px, 2px, 1, $defaultColor, gray, true);
}

label.inputfield-toggle {
  display: block;
  cursor: pointer;
  min-height: 22px;
  margin: 5px;
  input {
    display: inline-block;
    margin: 0;
    float: right;
  }
}

//
// create your own classes as you wish, some other exotic examples
//
input[type="checkbox"].inputfield-toggle.square {
  @include inputfield-toggle(32px, 16px, 1px, 0.1, #3778ff, gray, false);
}

input[type="checkbox"].inputfield-toggle.long {
  @include inputfield-toggle(64px, 16px, 1px, 0.25, #3778ff, gray, true);
}

input[type="checkbox"].inputfield-toggle.custom {
  @include inputfield-toggle(64px, 22px, 2px, 0.25, #7e7, #ed5c65, true);
  &:focus,
  &:hover {
    &:after {
      content: "|||";
      color: blue;
      box-shadow: 0px 2px 1px black;
    }
  }
  &:checked:before {
    color: blue;
  }
}